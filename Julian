#!/usr/bin/python3
#+
# Conversion between Gregorian dates and Julian days/times. This
# script can be invoked in various ways (all dates/times in UTC):
#
#    Julian -d|--days
#         outputs the current integer Julian day number.
#    Julian -f|--fracdays
#         outputs the current Julian day number with fraction
#         indicating time of day.
#    Julian -s|--seconds
#         outputs the current Julian seconds
#         (Julian day number * 84600 plus seconds since midnight)
#    Julian -d|--days n
#         outputs the Gregorian year, month and day corresponding
#         to Julian day n.
#    Julian -f|--fracdays n
#         outputs the Gregorian year, month and day and hours, minutes
#         and seconds since midnight corresponding to (possibly
#         fractional) Julian day n.
#    Julian -s|--seconds n
#         outputs the Gregorian year, month and day and hours, minutes
#         and seconds since midnight corresponding to Julian seconds n.
#    Julian -d|--days y m d
#         outputs the Julian day corresponding to the specified
#         Gregorian year, month and day.
#    Julian -f|--fracdays y m d h m s
#         outputs the Julian day (with fraction indicating time of day)
#         corresponding to the specified Gregorian year, month and day
#         and hours, minutes and seconds since midnight.
#    Julian -s|--seconds y m d h m s
#         outputs the Julian seconds corresponding to the specified
#         Gregorian year, month and day and hours, minutes and seconds
#         since midnight.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import time
import getopt

#+
# Useful stuff
#-

seconds_per_day = 86400
unix_base_julian_day = 2440588 # = gregorian_to_julian_day(1970, 1, 1)
unix_base_julian_seconds = unix_base_julian_day * seconds_per_day

def gregorian_to_julian_day(year, month, day) :
    """returns the Julian day number corresponding to the specified
    Gregorian calendar date."""
    m = int((month - 14) / 12)
    return \
        (
            int(1461 * (year + 4800 + m) / 4)
        +
            int(367 * (month - 2 - 12 * m) / 12)
        -
            int(3 * ((year + 4900 + m) // 100) / 4)
        +
            day
        -
            32075
        )
#end gregorian_to_julian_day

def julian_day_to_gregorian(julian_day) :
    """returns the Gregorian calendar date (year, month, day) corresponding
    to the specified Julian day number."""
    l = julian_day + 68569
    n = int(4 * l / 146097)
    l = l - int((146097 * n + 3) / 4)
    i = int((4000 * (l + 1)) / 1461001)
    l = l - int(1461 * i / 4) + 31
    j = int(80 * l / 2447)
    day = l - int(2447 * j / 80)
    l = int(j / 11)
    month = j + 2 - 12 * l
    year = 100 * (n - 49) + i + l
    return (year, month, day)
#end julian_day_to_gregorian

def now_julian() :
    """returns the number of Julian-day seconds for the
    present moment (UTC)."""
    return \
        (
            unix_base_julian_seconds
        +
            int(time.time())
        )
#end now_julian

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "dfs",
    ["days", "fracdays", "seconds",]
  )
do_what = None
for keyword, value in opts :
    if keyword == "-d" or keyword == "--days" :
        do_what = "days"
    elif keyword == "-f" or keyword == "--fracdays" :
        do_what = "fracdays"
    elif keyword == "-s" or keyword == "--seconds" :
        do_what = "seconds"
    #end if
#end for
if do_what == None :
    raise getopt.GetoptError("must specify either --days or --seconds")
#end if
if do_what == "seconds" : # conversions in seconds
    if len(args) == 1 :
        timeval = int(args[0])
        dateval = julian_day_to_gregorian(timeval // seconds_per_day)
        timeval %= seconds_per_day
        hours = timeval // 3600
        minutes = timeval // 60 % 60
        seconds = timeval % 60
        result = dateval + (hours, minutes, seconds)
    elif len(args) == 6 :
        result = \
          (
                    gregorian_to_julian_day
                      (
                        int(args[0]),
                        int(args[1]),
                        int(args[2])
                      )
                *
                    seconds_per_day
            +
                int(args[3]) * 3600
            +
                int(args[4]) * 60
            +
                int(args[5]),
          )
    elif len(args) == 0 :
        result = (now_julian(),)
    else :
        raise getopt.GetoptError("must specify 0, 1 or 6 args for --seconds")
    #end if
elif do_what == "fracdays" :
    if len(args) == 1 :
        timeval = float(args[0])
        dateval = julian_day_to_gregorian(int(timeval))
        time_of_day = int((timeval - int(timeval)) * seconds_per_day)
        hours = int(time_of_day) // 3600
        minutes = int(time_of_day) // 60 % 60
        seconds = time_of_day % 60
        result = dateval + (hours, minutes, seconds)
    elif len(args) == 6 :
        result = \
          (
                (
                        gregorian_to_julian_day
                          (
                            int(args[0]),
                            int(args[1]),
                            int(args[2])
                          )
                    *
                        seconds_per_day
                +
                    int(args[3]) * 3600
                +
                    int(args[4]) * 60
                +
                    int(args[5])
                )
            /
                seconds_per_day,
          )
    elif len(args) == 0 :
        result = (now_julian() / seconds_per_day,)
    else :
        raise getopt.GetoptError("must specify 0, 1 or 6 args for --fracdays")
    #end if
else : # conversions in whole days
    if len(args) == 1 :
        result = julian_day_to_gregorian(int(args[0]))
    elif len(args) == 3 :
        result = \
            (
                gregorian_to_julian_day(int(args[0]), int(args[1]), int(args[2])),
            )
    elif len(args) == 0 :
        result = (now_julian() // seconds_per_day,)
    else :
        raise getopt.GetoptError("must specify 0, 1 or 3 args for --days")
    #end if
#end if
sys.stdout.write(" ".join([str(i) for i in result]) + "\n")
